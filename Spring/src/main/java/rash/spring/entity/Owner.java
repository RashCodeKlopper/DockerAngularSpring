package rash.spring.entity;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotBlank;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity(name = "owners")
@Table(name = "owners", schema = "public")
@Data
// Use below annotation to prevent 'java.lang.StackOverflowError: null' originated from Lombok's @Data annotation
@EqualsAndHashCode(exclude = {"accounts"})
// Use below annotation to help with the serialization of entities with bidirectional relationship
// This is to prevent the 'Jackson JSON infinite recursion' error
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class Owner {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @NotBlank
  @Column(name = "name")
  private String name;

  @Column(name = "date_of_birth")
  private LocalDateTime dateOfBirth;

  @NotBlank
  @Column(name = "address")
  private String address;

  // Use below annotation to exclude a circular dependency originated from Lombok's @Data toString() autogenerated method!
  @ToString.Exclude
  @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "owner")
  private Set<Account> accounts = new HashSet<>();

}
